# -*- coding: utf-8 -*-
"""Clasificacion Binaria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UKXY8OGCZ_hzbOx8W5XJbvp-BJ7Hnv6c
"""

import numpy as np
from keras.datasets import imdb
from keras import models, layers, optimizers

(train_data, train_labels),(test_data, test_labels) = imdb.load_data(num_words=10000)

train_data[0]

train_labels[0]

word_index = imdb.get_word_index()

word_index = dict([(value, key) for (key,value) in word_index.items()])

word_index

for _ in train_data[0]:
  print (word_index.get(_-3))

train_data.shape

def vectorizar(sequences, dim=10000):
  results = np.zeros((len(sequences),dim))
  for i, sequences in enumerate (sequences):
    results[i, sequences]=1
  return results

x_train = vectorizar(train_data)
x_test = vectorizar(test_data)

x_train[0]

y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape = (10000,)))

model.add(layers.Dense(16, activation='relu'))

model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='rmsprop',
              loss='binary_crossentropy',
              metrics = 'accuracy')

x_val = x_train [:10000]
partial_x_train = x_train[10000:]

y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_x_train, partial_y_train,
                    epochs=4,
                    batch_size=512, 
                    validation_data = (x_val, y_val))

import matplotlib.pyplot as plt
history_dict=history.history
loss_values= history_dict['loss']
val_loss_values = history_dict['val_loss']

epoch= range(1, len(loss_values)+1)
plt.plot(epoch, loss_values, 'o',label='training')
plt.plot(epoch, val_loss_values, '--', label='training')
plt.legend()
plt.show()

model.evaluate(x_test, y_test)

